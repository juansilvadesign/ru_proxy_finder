#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
RU Proxy Finder - —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VATS.

–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
–∏ –≤—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ–∫—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å VATS —Å —Ñ–æ—Ä–º–æ–π –≤—Ö–æ–¥–∞.

–ê–≤—Ç–æ—Ä: SergD
–õ–∏—Ü–µ–Ω–∑–∏—è: MIT
"""

import asyncio
import argparse
import os
import sys
from rich.console import Console
from rich.table import Table
from use_proxy_api import RussianProxyFinder

console = Console()


async def find_proxies(check_vats=True, max_concurrent=20, timeout=5):
    """–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏."""
    finder = RussianProxyFinder()
    await finder.initialize()

    try:
        # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        await finder.get_proxies_from_api()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω (–∑–∞–º–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ check_country)
        await finder.verify_russian_proxies()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –ø—Ä–æ–∫—Å–∏
        await finder.save_proxies()

        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å VATS
        if check_vats:
            working_proxies = await finder.check_vats_access()
            if working_proxies:
                show_working_proxies(working_proxies)
                return working_proxies
            else:
                console.print("[bold red]–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–∫—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ—Ç–∫—Ä—ã—Ç—å VATS —Å —Ñ–æ—Ä–º–æ–π –≤—Ö–æ–¥–∞!")

        return finder.russian_proxies
    finally:
        await finder.close()


def show_working_proxies(proxies):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã."""
    if not proxies:
        console.print("[bold red]–ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    table = Table(title="–†–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VATS")
    table.add_column("‚Ññ", style="cyan")
    table.add_column("–ü—Ä–æ–∫—Å–∏", style="green")

    for idx, proxy in enumerate(proxies, 1):
        table.add_row(str(idx), proxy)

    console.print(table)
    console.print("\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VATS —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä.")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(description="–ü–æ–∏—Å–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VATS")
    parser.add_argument("-n", "--novats", action="store_true", help="–ù–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å VATS")
    parser.add_argument("-c", "--concurrent", type=int, default=20, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    parser.add_argument("-t", "--timeout", type=int, default=5, help="–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    args = parser.parse_args()

    console.print("\nüîç –ü–æ–∏—Å–∫ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VATS...\n")

    try:
        await find_proxies(check_vats=not args.novats, max_concurrent=args.concurrent, timeout=args.timeout)
    except KeyboardInterrupt:
        console.print("\n[bold yellow]–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        sys.exit(0)
    except Exception as e:
        console.print(f"\n[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
